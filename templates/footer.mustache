{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    Page footer.
}}

{{#footerblock}}

            {{#footlogo}}
            {{#logourl}}
            {{/logourl}}
            {{/footlogo}}

            {{# infolink}}
                {{{infolink}}}
             {{/ infolink}}
        {{#block3}}
      
            {{# phoneno}}
            {{/ phoneno}}
            {{# emailid}}
            {{/ emailid}}


         {{# url}}
             {{# fburl}}
            {{/ fburl}}
            {{# pinurl}}
            {{/ pinurl}}
            {{# twurl}}
            {{/ twurl}}
            {{# gpurl}}
            {{/ gpurl}}
        {{/ url}}
        {{/block3}}
    {{# copyright_footer}}
    {{/ copyright_footer}}
        {{# output.custom_menu_flat }}
        {{/ output.custom_menu_flat }}
{{/footerblock}}




{{{output.standard_end_of_body_html}}}
{{#js}}
require(['theme_boost/loader']);
require(['theme_boost/drawer'], function(mod) {
    mod.init();
});
{{/js}}





    <link rel="stylesheet" href="css/bootstrap.min.css" />

<style>


.container-footer {
    font-size: 14px;
    font-family: 'MontserratAlternates-Medium', sans-serif;
    -webkit-font-smoothing: antialiased;
}


.secPad {
    padding: 60px 0;
}

.social p {
    margin:10px;
}

.social a:hover {
    color: #006cc8;
}

.social a {
    font-size: 32px;
    margin: 0 10px;
    color: #FFFFFF;
}

.foot {
    border-top: 1px solid #FFFFFF;
    padding: 45px 0;
    background: #6fb352;
}


#contactUs {
    color: #fff;
    box-shadow: 0px 0px 1px rgba(0,0,0,0.4);
    background: #5E5E5E;
    background-size: cover !important;
    /* background-size: cover; */
    background-position: center;
}

#contactUs h2, #contactUs p {
    color: #fff;
}
.contactUsParalax{
background-image: url('https://ainalab.kz/images/leaves_bg.jpg') !important;
background-size: cover !important;
background-repeat: no-repeat !important;
background-attachment: fixed !important;    
}
.pc-m-l-25{
    margin-left:25px;
}

    .page-section h1 {
        font-size: 3em;
    }

    .page-section h2 {
        font-size: 2em;
    }

    .page-section p {
        font-size: 1em;
        margin: 0 0 20px;
    }






/* End carousel */
@media (min-width: 768px) {
    .header .navbar-brand {
        padding-left: 0;
    }

    .navbar-nav {
        float: right;
    }

    .navbar-inverse .navbar-nav > li > a {
        padding: 5px 12px !important;
        border-radius: 5px;
        margin: 19px 0px;
    }
}

@media (max-width: 768px) {
  
    .banner-container {
        background-size: cover !important;
        height: 400px;
        background-position: center;
    }
    .navbar-inverse .navbar-collapse {
     border-color: #000;
    }
 
    .da-slide .da-link{
        top:150px;
        }
.navbar-collapse.in{
    overflow-y: initial;
    margin-top: 58px;
    }
    .team-member .member-img img {
        max-width: 100%;
    }

    .da-slider {
        height: 380px;
        width: 100%;
        min-width: initial;
        margin: 0px !important;
    }
.da-slide {
position: absolute;
width: 100%;
height: 100%;
top: 23px;
left: 0px;
text-align: left;
}
    .da-slide h2 {
        font-size: 40px;
        text-align: center;
        width: initial;
        top: 10px;
    }

    .da-slide p {
        width: 65%;
        top: 65px;
        height: 50px;
    }

    .header .navbar-nav > li > a {
        padding: 25px 12px;
    }

    .portfolio-item:hover .folio-info {
        top: 0px;
    }

    .portfolio-item .portfolio-desc .folio-info {
        padding: 0px;
    }

    .portfolio-item .portfolio-desc .folio-info h5 {
        font-size: 1em;
    }

    .navbar-inverse .navbar-nav > li > a {
        font-size: 1em;
        padding: 5px 7px !important;
        border-radius: 5px;
        margin: 19px 0px;
    }

    .skilltitle {
        text-align: left;
    }

    #timeline {
        margin: 0px 12px;
    }
}

@media (max-width:760px) {
    .header .navbar-nav > li > a {
        padding: 7px 12px;
        font-size: 14px;
    }

    .navbar-inverse .navbar-collapse, .navbar-inverse .navbar-form {
        border-color: #A8A8A8;
    }
    .navbar-inverse .navbar-collapse, .navbar-inverse .navbar-form {
    border-color: #A8A8A8;
    background: #fff; 
    width: 100%;
    }
}

@media (max-width: 480px) {
    .banner-container {
        background-size: cover !important;
        height: 300px;
        background-position: center;
    }

    .navbar-inverse .navbar-nav > li > a {
        font-size: 0.9em;
        padding: 5px 7px !important;
        margin: 2px 0px;
    }

    .navbar-toggle {
        margin: 17px;
    }

    .da-slide h2 {
        font-size: 30px;
        text-align: center;
        width: initial;
        top: 10px;
    }

    .da-slide p {
        width: 65%;
        top: 65px;
        height: 50px;
    }

    .page-section h1 {
        font-size: 3em;
    }

    .page-section h2 {
        font-size: 2em;
    }

    .page-section p {
        font-size: 1em;
        margin: 0 0 20px;
    }

    .portfolio-item .portfolio-desc .folio-info h5 {
        font-size: 11px;
    }
}

@media (max-width: 320px) {


    .da-slider {
        height: 300px;
    }

    .da-slider {
        width: 100%;
        min-width: initial;
        position: relative;
        margin: 0 auto;
    }

    .da-slide h2 {
        font-size: 30px;
        text-align: center;
        width: initial;
        top: 10px;
    }

    .da-dots {
        bottom: 2px;
    }

    .grid .text-content {
        padding-left: 29%;
        padding-right: 2%;
    }

    .portfolio-item:hover .folio-info {
        top: 0px;
    }

    .portfolio-item .portfolio-desc .folio-info h5 {
        text-transform: uppercase;
        text-align: center;
        font-weight: normal;
        font-size: 10px;
        margin: 10px 0 0 0;
    }

    nav#filter li {
        display: inline-block;
        margin: 7px;
    }
}

#owl-demo .item {
    background: #3fbf79;
    padding: 30px 0px;
    margin: 10px;
    color: #FFF;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 3px;
    text-align: center;
}

.customNavigation {
    text-align: center;
}

.customNavigation a {
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
.da-dots span.da-dots-current:after {
content: '';
width: 8px;
height: 8px;
position: absolute;
top: 4px;
left: 4px;
border-radius: 0; 
background: #fff;
}
a.btn.btn-skin {
background: #6fb352;
color: #fff;
}
.da-slide .da-link {
top: 270px;
color: #5B771E;
text-shadow: none;
border: 1px solid rgba(255,255,255,0.8);
padding: 2px 20px;
font-size: 16px;
line-height: 30px;
width: auto;
text-align: center;
background: rgba(255, 255, 255, 1);
}
/*нужно*/
.contactUsParalax{
background-image: url('https://ainalab.kz/images/leaves_bg.jpg') !important;
background-size: cover !important;
background-repeat: no-repeat !important;
background-attachment: fixed !important;    
}
.pc-m-l-25{
    margin-left:25px;
}
/*нужно*/

@media(min-width:992px) and (max-width:1199px){
    .alternative{
        margin:220px 0;
    }
    .alternative_img{
        max-width: 100px;
    }
}

@media(min-width:768px) and (max-width:991px){
    .alternative_img img{
        max-width: 80px;
    }
    .alternative_img:nth-child(2){
        top:-170px !important;
        left:10% !important;
    }
    .alternative_img:nth-child(3){
        top:-150px !important;
        left:26% !important;
    }
    .alternative_img:nth-child(4){
        top:-120px !important;
        left:41% !important;
    }
    .alternative_img:nth-child(5){
        top:-85px !important;
        right:27% !important;
    }
    .alternative_img:nth-child(6){
        top:-65px !important;
        right:9% !important;
    }
    .alternative_img:nth-child(7){
        top:45px !important;
        left:9% !important;
    }
    .alternative_img:nth-child(8){
        top:60px !important;
        left:25% !important;
    }
    .alternative_img:nth-child(9){
        top:120px !important;
        left:40% !important;
    }
    .alternative_img:nth-child(10){
        top:150px !important;
        right:26% !important;
    }
    .alternative_img:nth-child(11){
        top:160px !important;
        right:8% !important;
    }
}

@media(max-width:767px){
    .alternative{
        display: none;
    }
    .alternative_mobile{
        display: block;
        height: 835px;
    }
    .alternative_center_line{
        position: absolute;
        right: 50%;
        transform: translate(50%,0);
        width: 13px;
        height: 835px;
        background: #4E4E4E;
        border-radius: 23px;
        z-index: 2;
    }
    .alternative_center_line_svg{
        position: absolute;
        right: 50%;
        transform: translate(50%,0);
        top:50px;
        z-index: 5;
    }
    .alternative_blocks{
        display: flex;
    }
    .alternative_left_blocks_flex{
        flex:50%;
    }
    .alternative_right_blocks_flex{
        flex:50%;
    }
    .alternative_left_blocks_flex{
        padding-right: 10px;
    }
    .alternative_right_blocks_flex{
        padding-left: 10px;
    }
    .alternative_left_block_inner{
        position: relative;
        max-width: 300px;
        height: 120px;
        border-radius: 100px 0 0 100px;
        margin-left:auto;
        top:19px;
    }
    .alternative_right_block_inner{
        top:20px;
        position: relative;
        max-width: 300px;
        height: 120px;
        border-radius: 0 100px 100px 0;
        background:red;
        margin-right: auto;
    }
    .alternative_right_white_shell{
        position: absolute;
        right: -5px;
        border-radius: 50000px 0 0 50000px;
        top:20%;
        padding-left:35px;
        height: 75px;
        background: white;
        z-index: 1;
    }
    .alternative_left_white_shell{
        position: absolute;
        left: -3px;
        border-radius: 0 50000px 50000px 0;
        top:20%;
        padding-right:35px;
        height: 75px;
        background: white;
        z-index: 1;
    }
    .alternative_left_block_inner_img{
        position: absolute;
        left: 7px;
        top:7px;
        width: 106px;
        height: 106px;
        border-radius: 50%;
        background: white;
    }
    .alternative_left_block_inner_img img{
        border-radius: 50%;
        position: absolute;
        width: 100px;
    }
    .alternative_left_block_inner_text{
        display: flex;
        max-width: 158px;
        height: 120px;
        margin-left:110px;
        text-align: right;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        font-weight: bold;
        font-size: 18px;
        color: #FFFFFF;
        align-items: center;
        margin-right: 32px;
        line-height: 18px;
    }
     .alternative_right_block_inner_img{
        position: absolute;
        right: 7px;
        top:7px;
        width: 106px;
        height: 106px;
        border-radius: 50%;
        background: white;
    }
    .alternative_right_block_inner_img img{
        border-radius: 50%;
        position: absolute;
        width: 100px;
    }
    .alternative_right_block_inner_text{
        display: flex;
        max-width: 150px;
        margin-left: 32px;
        height: 120px;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        font-weight: bold;
        font-size: 18px;
        color: #FFFFFF;
        align-items: center;
        margin-right: 100px;
        line-height: 18px;
    }
    .alternative_center_line_svg_mobile{
        display: none;
    }
    .alternative_right_block_inner_text_mobile{
        display: none;
    }
    .alternative_left_block_inner_text_mobile{
        display: none;
    }
}
@media(max-width:600px){
    .display-3_mobile_600{
        font-size: 35px !important;
        line-height: 50px !important;
    }
    .alternative_mobile{
        height: 500px;
    }
    .alternative_text span{
        font-size:35px;
    }
    .alternative_left_block_inner_text{
        font-size: 12px;
        margin-left: 70px;
        line-height: 12px;
        top:10px;
        height: 70px;
        margin-right: 18px;
    }
    .alternative_right_block_inner_text{
        font-size: 12px;
        height: 70px;
        line-height: 12px;
        margin-right: 70px;
        word-wrap: break-word;
        overflow-wrap: break-word;
        margin-left: 18px;
    }
    
    .alternative_left_block_inner_img{
        width: 52px;
        height: 52px;
    }
    .alternative_left_block_inner_img img{
        width: 52px;
        height: 52px;
    }
    .alternative_right_block_inner_img{
        width: 52px;
        height: 52px;
    }
    .alternative_right_block_inner_img img{
        width: 52px;
        height: 52px;
    }
    .alternative_left_block_inner{
        height: 70px;
        border-radius: 20px 0px 0px 20px;
    }
    .alternative_right_block_inner{
        height: 70px;
        border-radius: 0px 20px 20px 0px;
    }
    .alternative_center_line{
        height: 460px;
        width: 7px;
    }
    .alternative_center_line_svg{
        display: none;
    }
    .alternative_center_line_svg_mobile{
        position: absolute;
        display: block;
        right: 50%;
        transform: translate(50%,0);
    }
    .alternative_right_white_shell{
        top:27%;
        height: 30px;
        padding-left: 20px;
    }
    .alternative_left_white_shell{
        top:28%;
        height: 30px;
        padding-right: 19px;
    }
    .alternative_left_block_inner:nth-child(1){
        top:11px;
    }
    .alternative_left_block_inner:nth-child(2){
        top:21px !important;
    }
    .alternative_left_block_inner:nth-child(3){
        top:50px !important;
    }
    .alternative_left_block_inner:nth-child(4){
        top:65px !important;
    }
    .alternative_left_block_inner:nth-child(5){
        top:101px !important;
    }
    .alternative_left_block_inner:nth-child(5) .alternative_left_block_inner_img img{
        top:-1px !important;
    }
    .alternative_right_block_inner:nth-child(1){
        top:11px;
    }
    .alternative_right_block_inner:nth-child(2){
        top:21px !important;
    }
    .alternative_right_block_inner:nth-child(3){
        top:50px !important;
    }
    .alternative_right_block_inner:nth-child(4){
        top:65px !important;
    }
    .alternative_right_block_inner:nth-child(5){
        top:101px !important;
    }
    .alternative_right_block_inner:nth-child(4) .alternative_right_block_inner_img img{
        top:-15px !important;
        left: 5px !important;
        width: 45px !important;
        height: 70px;
    }
    .alternative_right_block_inner:nth-child(2) .alternative_right_block_inner_img img{
        left:1px !important;
    }
    .alternative_right_block_inner:nth-child(3) .alternative_right_block_inner_img img{
        top:1px !important;
    }
    .alternative_right_block_inner:nth-child(5) .alternative_right_block_inner_img img{
        width: 50px !important;
        height: 65px !important;
    }
    .alternative_left_block_inner_text_mobile{
        display: none;
    }
    .alternative_right_block_inner_text_mobile{
        display: none;
    }
}

@media(max-width:400px){
    .display-3_mobile_600{
        font-size: 28px !important;
        line-height: 50px !important;
    }
    .alternative_right_block_inner{
        display: flex;
        align-items: center;
    }
    .alternative_left_block_inner{
        display: flex;
        align-items: center;
    }
    .alternative_left_blocks_flex{
        margin-left: 4px;
    }
    .alternative_right_blocks_flex{
        margin-right: 4px;
    }
    .alternative_left_block_inner_text{
        display: none;
    }
    .alternative_right_block_inner_text{
        display: none;
    }
    .alternative_left_block_inner_text_mobile{
        display: flex;
        text-align: right;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        font-weight: bold;
        color: #FFFFFF;
        margin-right: 20px;
        max-width: 70px;
        font-size: 12px;
        line-height: 12px;
        margin-left: 45px;
        max-width: 75px;
    }
    .alternative_right_block_inner_text_mobile{
        display: flex;
        text-align: left;
        font-family: 'Montserrat Alternates';
        font-style: normal;
        font-weight: bold;
        color: #FFFFFF;
        margin-right: 45px;
        max-width: 70px;
        font-size: 12px;
        line-height: 12px;
        margin-left: 20px;
        max-width: 75px;
    }
    .alternative_left_block_inner:nth-child(2) .alternative_left_block_inner_img{
        width:10px;
    }
    .alternative_left_block_inner:nth-child(4) .alternative_left_block_inner_img{
        width:10px;
    }
    .alternative_left_blocks_flex{
        margin-left: initial;
    }
    .alternative_right_blocks_flex{
        margin-right: initial;
    }
    .alternative_right_block_inner:nth-child(5) .alternative_right_block_inner_img{
        width: 1px !important;
    }
    .alternative_right_block_inner:nth-child(5) img{
        right: -12px !important;
    }






}

</style>





<div class="content-footer">


  <!--Contact -->
    <section id="contactUs" class="page-section secPad contactUsParalax">
        <div class="container">


  
                    <h2 class="container-h" align="center">Обратная связь</h2>
<br>

            <div class="row mrgn30">
     
            <div class="row mb-3">

                        <!--NOTE: Update your email Id in "contact_me.php" file in order to receive emails from your contact form-->
            <form name="sentMessage" id="contactForm"  novalidate>



            <div class="col-sm-6 col-lg-8 themed-grid-co">

            <div class="control-group">
            <div class="controls">
            <input type="text" class="form-control" style="margin: 0 0 0 0; pading 0 0 0 0; width:100%"
            placeholder="Имя" id="name" required
            data-validation-required-message="Please enter your name" />
            <p class="help-block"></p>
            </div>
            </div>  

            <br>

            <div class="control-group">
            <div class="controls">
            <input type="text" class="form-control" placeholder="Почта" 
            id="email" required 
            data-validation-required-message="Please enter your email" />
            </div>
            </div>  

            <br>

            <div class="control-group">
            <div class="controls">
            <textarea rows="10" cols="100" class="form-control" 
            placeholder="Сообщение" id="message" required
            data-validation-required-message="Ваше сообщение" minlength="5" 
            data-validation-minlength-message="Min 5 characters" 
            maxlength="999" style="resize:none"></textarea>
            </div>
            </div>     
            <div id="success"> </div> <!-- For success/fail messages -->
            <br />
            <button type="submit" class="lol" id="cancel-offer">Отправить</button><br />
            </div> 
            </form>
                    </div>

              <div class="col-6 col-lg-4 themed-grid-col">
                     <address style="font-size: 18px;">
                       E-mail: litter.corp@gmail.com<br>
                       Телефон: +77011134042<br>
                       Instagram:  @ainalab.kz<br>
                    </address>
                </div>
            </div>
        </div>
</section>







<footer class="foot">
<div class="container-footer">
<div class="container">
<div class="social text-center">
<span style="color: white; font-size: 16px;">
<a href="www.instagram.com/ainalab.kz/" style="margin: 0px; font-size: 16px;">
@ainalab</a>. 

Все права Защищены.</span>
<br>
<span style="color: white; font-size: 16px;">Веб-сайт разработан 
<a href="www.kairsolutions.com" style="margin: 0px; font-size: 16px;">Kairsolutions.com</a></span>
<br>
</div>
</div>
</div></div>
</footer>
























 <script>

/* jqBootstrapValidation
 * A plugin for automating validation on Twitter Bootstrap formatted forms.
 *
 * v1.3.6
 *
 * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file
 *
 * http://ReactiveRaven.github.com/jqBootstrapValidation/
 */

$(".lol").click(function() {
    var createdElements = [];

    var defaults = {
        options: {
            prependExistingHelpBlock: false,
            sniffHtml: true, // sniff for 'required', 'maxlength', etc
            preventSubmit: true, // stop the form submit event from firing if validation fails
            submitError: false, // function called if there is an error when trying to submit
            submitSuccess: false, // function called just before a successful submit event is sent to the server
            semanticallyStrict: false, // set to true to tidy up generated HTML output
            autoAdd: {
                helpBlocks: true
            },
            filter: function () {
                // return $(this).is(":visible"); // only validate elements you can see
                return true; // validate everything
            }
        },
    methods: {
      init : function( options ) {

        var settings = $.extend(true, {}, defaults);

        settings.options = $.extend(true, settings.options, options);

        var $siblingElements = this;

        var uniqueForms = $.unique(
          $siblingElements.map( function () {
            return $(this).parents("form")[0];
          }).toArray()
        );

        $(uniqueForms).bind("submit", function (e) {
          var $form = $(this);
          var warningsFound = 0;
          var $inputs = $form.find("input,textarea,select").not("[type=submit],[type=image]").filter(settings.options.filter);
          $inputs.trigger("submit.validation").trigger("validationLostFocus.validation");

          $inputs.each(function (i, el) {
            var $this = $(el),
              $controlGroup = $this.parents(".control-group").first();
            if (
              $controlGroup.hasClass("warning")
            ) {
              $controlGroup.removeClass("warning").addClass("error");
              warningsFound++;
            }
          });

          $inputs.trigger("validationLostFocus.validation");

          if (warningsFound) {
            if (settings.options.preventSubmit) {
              e.preventDefault();
            }
            $form.addClass("error");
            if ($.isFunction(settings.options.submitError)) {
              settings.options.submitError($form, e, $inputs.jqBootstrapValidation("collectErrors", true));
            }
          } else {
            $form.removeClass("error");
            if ($.isFunction(settings.options.submitSuccess)) {
              settings.options.submitSuccess($form, e);
            }
          }
        });

        return this.each(function(){

          // Get references to everything we're interested in
          var $this = $(this),
            $controlGroup = $this.parents(".control-group").first(),
            $helpBlock = $controlGroup.find(".help-block").first(),
            $form = $this.parents("form").first(),
            validatorNames = [];
          // create message container if not exists
          if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {
              $helpBlock = $('<div class="help-block" style="color:red" />');
              $controlGroup.find('.controls').append($helpBlock);
                            createdElements.push($helpBlock[0]);
          }

          // =============================================================
          //                                     SNIFF HTML FOR VALIDATORS
          // =============================================================

          // *snort sniff snuffle*

          if (settings.options.sniffHtml) {
            var message = "";
            // ---------------------------------------------------------
            //                                                   PATTERN
            // ---------------------------------------------------------
            if ($this.attr("pattern") !== undefined) {
              message = "Not in the expected format<!-- data-validation-pattern-message to override -->";
              if ($this.data("validationPatternMessage")) {
                message = $this.data("validationPatternMessage");
              }
              $this.data("validationPatternMessage", message);
              $this.data("validationPatternRegex", $this.attr("pattern"));
            }
            // ---------------------------------------------------------
            //                                                       MAX
            // ---------------------------------------------------------
            if ($this.attr("max") !== undefined || $this.attr("aria-valuemax") !== undefined) {
              var max = ($this.attr("max") !== undefined ? $this.attr("max") : $this.attr("aria-valuemax"));
              message = "Too high: Maximum of '" + max + "'<!-- data-validation-max-message to override -->";
              if ($this.data("validationMaxMessage")) {
                message = $this.data("validationMaxMessage");
              }
              $this.data("validationMaxMessage", message);
              $this.data("validationMaxMax", max);
            }
            // ---------------------------------------------------------
            //                                                       MIN
            // ---------------------------------------------------------
            if ($this.attr("min") !== undefined || $this.attr("aria-valuemin") !== undefined) {
              var min = ($this.attr("min") !== undefined ? $this.attr("min") : $this.attr("aria-valuemin"));
              message = "Too low: Minimum of '" + min + "'<!-- data-validation-min-message to override -->";
              if ($this.data("validationMinMessage")) {
                message = $this.data("validationMinMessage");
              }
              $this.data("validationMinMessage", message);
              $this.data("validationMinMin", min);
            }
            // ---------------------------------------------------------
            //                                                 MAXLENGTH
            // ---------------------------------------------------------
            if ($this.attr("maxlength") !== undefined) {
              message = "Too long: Maximum of '" + $this.attr("maxlength") + "' characters<!-- data-validation-maxlength-message to override -->";
              if ($this.data("validationMaxlengthMessage")) {
                message = $this.data("validationMaxlengthMessage");
              }
              $this.data("validationMaxlengthMessage", message);
              $this.data("validationMaxlengthMaxlength", $this.attr("maxlength"));
            }
            // ---------------------------------------------------------
            //                                                 MINLENGTH
            // ---------------------------------------------------------
            if ($this.attr("minlength") !== undefined) {
              message = "Too short: Minimum of '" + $this.attr("minlength") + "' characters<!-- data-validation-minlength-message to override -->";
              if ($this.data("validationMinlengthMessage")) {
                message = $this.data("validationMinlengthMessage");
              }
              $this.data("validationMinlengthMessage", message);
              $this.data("validationMinlengthMinlength", $this.attr("minlength"));
            }
            // ---------------------------------------------------------
            //                                                  REQUIRED
            // ---------------------------------------------------------
            if ($this.attr("required") !== undefined || $this.attr("aria-required") !== undefined) {
              message = settings.builtInValidators.required.message;
              if ($this.data("validationRequiredMessage")) {
                message = $this.data("validationRequiredMessage");
              }
              $this.data("validationRequiredMessage", message);
            }
            // ---------------------------------------------------------
            //                                                    NUMBER
            // ---------------------------------------------------------
            if ($this.attr("type") !== undefined && $this.attr("type").toLowerCase() === "number") {
              message = settings.builtInValidators.number.message;
              if ($this.data("validationNumberMessage")) {
                message = $this.data("validationNumberMessage");
              }
              $this.data("validationNumberMessage", message);
            }
            // ---------------------------------------------------------
            //                                                     EMAIL
            // ---------------------------------------------------------
            if ($this.attr("type") !== undefined && $this.attr("type").toLowerCase() === "email") {
              message = "Неверный email адрес<!-- data-validator-validemail-message to override -->";
              if ($this.data("validationValidemailMessage")) {
                message = $this.data("validationValidemailMessage");
              } else if ($this.data("validationEmailMessage")) {
                message = $this.data("validationEmailMessage");
              }
              $this.data("validationValidemailMessage", message);
            }
            // ---------------------------------------------------------
            //                                                MINCHECKED
            // ---------------------------------------------------------
            if ($this.attr("minchecked") !== undefined) {
              message = "Not enough options checked; Minimum of '" + $this.attr("minchecked") + "' required<!-- data-validation-minchecked-message to override -->";
              if ($this.data("validationMincheckedMessage")) {
                message = $this.data("validationMincheckedMessage");
              }
              $this.data("validationMincheckedMessage", message);
              $this.data("validationMincheckedMinchecked", $this.attr("minchecked"));
            }
            // ---------------------------------------------------------
            //                                                MAXCHECKED
            // ---------------------------------------------------------
            if ($this.attr("maxchecked") !== undefined) {
              message = "Too many options checked; Maximum of '" + $this.attr("maxchecked") + "' required<!-- data-validation-maxchecked-message to override -->";
              if ($this.data("validationMaxcheckedMessage")) {
                message = $this.data("validationMaxcheckedMessage");
              }
              $this.data("validationMaxcheckedMessage", message);
              $this.data("validationMaxcheckedMaxchecked", $this.attr("maxchecked"));
            }
          }

          // =============================================================
          //                                       COLLECT VALIDATOR NAMES
          // =============================================================

          // Get named validators
          if ($this.data("validation") !== undefined) {
            validatorNames = $this.data("validation").split(",");
          }

          // Get extra ones defined on the element's data attributes
          $.each($this.data(), function (i, el) {
            var parts = i.replace(/([A-Z])/g, ",$1").split(",");
            if (parts[0] === "validation" && parts[1]) {
              validatorNames.push(parts[1]);
            }
          });

          // =============================================================
          //                                     NORMALISE VALIDATOR NAMES
          // =============================================================

          var validatorNamesToInspect = validatorNames;
          var newValidatorNamesToInspect = [];

          do // repeatedly expand 'shortcut' validators into their real validators
          {
            // Uppercase only the first letter of each name
            $.each(validatorNames, function (i, el) {
              validatorNames[i] = formatValidatorName(el);
            });

            // Remove duplicate validator names
            validatorNames = $.unique(validatorNames);

            // Pull out the new validator names from each shortcut
            newValidatorNamesToInspect = [];
            $.each(validatorNamesToInspect, function(i, el) {
              if ($this.data("validation" + el + "Shortcut") !== undefined) {
                // Are these custom validators?
                // Pull them out!
                $.each($this.data("validation" + el + "Shortcut").split(","), function(i2, el2) {
                  newValidatorNamesToInspect.push(el2);
                });
              } else if (settings.builtInValidators[el.toLowerCase()]) {
                // Is this a recognised built-in?
                // Pull it out!
                var validator = settings.builtInValidators[el.toLowerCase()];
                if (validator.type.toLowerCase() === "shortcut") {
                  $.each(validator.shortcut.split(","), function (i, el) {
                    el = formatValidatorName(el);
                    newValidatorNamesToInspect.push(el);
                    validatorNames.push(el);
                  });
                }
              }
            });

            validatorNamesToInspect = newValidatorNamesToInspect;

          } while (validatorNamesToInspect.length > 0)

          // =============================================================
          //                                       SET UP VALIDATOR ARRAYS
          // =============================================================

          var validators = {};

          $.each(validatorNames, function (i, el) {
            // Set up the 'override' message
            var message = $this.data("validation" + el + "Message");
            var hasOverrideMessage = (message !== undefined);
            var foundValidator = false;
            message =
              (
                message
                  ? message
                  : "'" + el + "' validation failed <!-- Add attribute 'data-validation-" + el.toLowerCase() + "-message' to input to change this message -->"
              )
            ;

            $.each(
              settings.validatorTypes,
              function (validatorType, validatorTemplate) {
                if (validators[validatorType] === undefined) {
                  validators[validatorType] = [];
                }
                if (!foundValidator && $this.data("validation" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {
                  validators[validatorType].push(
                    $.extend(
                      true,
                      {
                        name: formatValidatorName(validatorTemplate.name),
                        message: message
                      },
                      validatorTemplate.init($this, el)
                    )
                  );
                  foundValidator = true;
                }
              }
            );

            if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {

              var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);
              if (hasOverrideMessage) {
                validator.message = message;
              }
              var validatorType = validator.type.toLowerCase();

              if (validatorType === "shortcut") {
                foundValidator = true;
              } else {
                $.each(
                  settings.validatorTypes,
                  function (validatorTemplateType, validatorTemplate) {
                    if (validators[validatorTemplateType] === undefined) {
                      validators[validatorTemplateType] = [];
                    }
                    if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {
                      $this.data("validation" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);
                      validators[validatorType].push(
                        $.extend(
                          validator,
                          validatorTemplate.init($this, el)
                        )
                      );
                      foundValidator = true;
                    }
                  }
                );
              }
            }

            if (! foundValidator) {
              $.error("Cannot find validation info for '" + el + "'");
            }
          });

          // =============================================================
          //                                         STORE FALLBACK VALUES
          // =============================================================

          $helpBlock.data(
            "original-contents",
            (
              $helpBlock.data("original-contents")
                ? $helpBlock.data("original-contents")
                : $helpBlock.html()
            )
          );

          $helpBlock.data(
            "original-role",
            (
              $helpBlock.data("original-role")
                ? $helpBlock.data("original-role")
                : $helpBlock.attr("role")
            )
          );

          $controlGroup.data(
            "original-classes",
            (
              $controlGroup.data("original-clases")
                ? $controlGroup.data("original-classes")
                : $controlGroup.attr("class")
            )
          );

          $this.data(
            "original-aria-invalid",
            (
              $this.data("original-aria-invalid")
                ? $this.data("original-aria-invalid")
                : $this.attr("aria-invalid")
            )
          );

          // =============================================================
          //                                                    VALIDATION
          // =============================================================

          $this.bind(
            "validation.validation",
            function (event, params) {

              var value = getValue($this);

              // Get a list of the errors to apply
              var errorsFound = [];

              $.each(validators, function (validatorType, validatorTypeArray) {
                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {
                  $.each(validatorTypeArray, function (i, validator) {
                    if (settings.validatorTypes[validatorType].validate($this, value, validator)) {
                      errorsFound.push(validator.message);
                    }
                  });
                }
              });

              return errorsFound;
            }
          );

          $this.bind(
            "getValidators.validation",
            function () {
              return validators;
            }
          );

          // =============================================================
          //                                             WATCH FOR CHANGES
          // =============================================================
          $this.bind(
            "submit.validation",
            function () {
              return $this.triggerHandler("change.validation", {submitting: true});
            }
          );
          $this.bind(
            [
              "keyup",
              "focus",
              "blur",
              "click",
              "keydown",
              "keypress",
              "change"
            ].join(".validation ") + ".validation",
            function (e, params) {

              var value = getValue($this);

              var errorsFound = [];

              $controlGroup.find("input,textarea,select").each(function (i, el) {
                var oldCount = errorsFound.length;
                $.each($(el).triggerHandler("validation.validation", params), function (j, message) {
                  errorsFound.push(message);
                });
                if (errorsFound.length > oldCount) {
                  $(el).attr("aria-invalid", "true");
                } else {
                  var original = $this.data("original-aria-invalid");
                  $(el).attr("aria-invalid", (original !== undefined ? original : false));
                }
              });

              $form.find("input,select,textarea").not($this).not("[name=\"" + $this.attr("name") + "\"]").trigger("validationLostFocus.validation");

              errorsFound = $.unique(errorsFound.sort());

              // Were there any errors?
              if (errorsFound.length) {
                // Better flag it up as a warning.
                $controlGroup.removeClass("success error").addClass("warning");

                // How many errors did we find?
                if (settings.options.semanticallyStrict && errorsFound.length === 1) {
                  // Only one? Being strict? Just output it.
                  $helpBlock.html(errorsFound[0] + 
                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data("original-contents") : "" ));
                } else {
                  // Multiple? Being sloppy? Glue them together into an UL.
                  $helpBlock.html("<ul role=\"alert\"><li>" + errorsFound.join("</li><li>") + "</li></ul>" +
                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data("original-contents") : "" ));
                }
              } else {
                $controlGroup.removeClass("warning error success");
                if (value.length > 0) {
                  $controlGroup.addClass("success");
                }
                $helpBlock.html($helpBlock.data("original-contents"));
              }

              if (e.type === "blur") {
                $controlGroup.removeClass("success");
              }
            }
          );
          $this.bind("validationLostFocus.validation", function () {
            $controlGroup.removeClass("success");
          });
        });
      },
      destroy : function( ) {

        return this.each(
          function() {

            var
              $this = $(this),
              $controlGroup = $this.parents(".control-group").first(),
              $helpBlock = $controlGroup.find(".help-block").first();

            // remove our events
            $this.unbind('.validation'); // events are namespaced.
            // reset help text
            $helpBlock.html($helpBlock.data("original-contents"));
            // reset classes
            $controlGroup.attr("class", $controlGroup.data("original-classes"));
            // reset aria
            $this.attr("aria-invalid", $this.data("original-aria-invalid"));
            // reset role
            $helpBlock.attr("role", $this.data("original-role"));
                        // remove all elements we created
                        if (createdElements.indexOf($helpBlock[0]) > -1) {
                            $helpBlock.remove();
                        }

          }
        );

      },
      collectErrors : function(includeEmpty) {

        var errorMessages = {};
        this.each(function (i, el) {
          var $el = $(el);
          var name = $el.attr("name");
          var errors = $el.triggerHandler("validation.validation", {includeEmpty: true});
          errorMessages[name] = $.extend(true, errors, errorMessages[name]);
        });

        $.each(errorMessages, function (i, el) {
          if (el.length === 0) {
            delete errorMessages[i];
          }
        });

        return errorMessages;

      },
      hasErrors: function() {

        var errorMessages = [];

        this.each(function (i, el) {
          errorMessages = errorMessages.concat(
            $(el).triggerHandler("getValidators.validation") ? $(el).triggerHandler("validation.validation", {submitting: true}) : []
          );
        });

        return (errorMessages.length > 0);
      },
      override : function (newDefaults) {
        defaults = $.extend(true, defaults, newDefaults);
      }
    },
        validatorTypes: {
      callback: {
        name: "callback",
        init: function ($this, name) {
          return {
            validatorName: name,
            callback: $this.data("validation" + name + "Callback"),
            lastValue: $this.val(),
            lastValid: true,
            lastFinished: true
          };
        },
        validate: function ($this, value, validator) {
          if (validator.lastValue === value && validator.lastFinished) {
            return !validator.lastValid;
          }

          if (validator.lastFinished === true)
          {
            validator.lastValue = value;
            validator.lastValid = true;
            validator.lastFinished = false;

            var rrjqbvValidator = validator;
            var rrjqbvThis = $this;
            executeFunctionByName(
              validator.callback,
              window,
              $this,
              value,
              function (data) {
                if (rrjqbvValidator.lastValue === data.value) {
                  rrjqbvValidator.lastValid = data.valid;
                  if (data.message) {
                    rrjqbvValidator.message = data.message;
                  }
                  rrjqbvValidator.lastFinished = true;
                  rrjqbvThis.data("validation" + rrjqbvValidator.validatorName + "Message", rrjqbvValidator.message);
                  // Timeout is set to avoid problems with the events being considered 'already fired'
                  setTimeout(function () {
                    rrjqbvThis.trigger("change.validation");
                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst
                }
              }
            );
          }

          return false;

        }
      },
      ajax: {
        name: "ajax",
        init: function ($this, name) {
          return {
            validatorName: name,
            url: $this.data("validation" + name + "Ajax"),
            lastValue: $this.val(),
            lastValid: true,
            lastFinished: true
          };
        },
        validate: function ($this, value, validator) {
          if (""+validator.lastValue === ""+value && validator.lastFinished === true) {
            return validator.lastValid === false;
          }

          if (validator.lastFinished === true)
          {
            validator.lastValue = value;
            validator.lastValid = true;
            validator.lastFinished = false;
            $.ajax({
              url: validator.url,
              data: "value=" + value + "&field=" + $this.attr("name"),
              dataType: "json",
              success: function (data) {
                if (""+validator.lastValue === ""+data.value) {
                  validator.lastValid = !!(data.valid);
                  if (data.message) {
                    validator.message = data.message;
                  }
                  validator.lastFinished = true;
                  $this.data("validation" + validator.validatorName + "Message", validator.message);
                  // Timeout is set to avoid problems with the events being considered 'already fired'
                  setTimeout(function () {
                    $this.trigger("change.validation");
                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst
                }
              },
              failure: function () {
                validator.lastValid = true;
                validator.message = "ajax call failed";
                validator.lastFinished = true;
                $this.data("validation" + validator.validatorName + "Message", validator.message);
                // Timeout is set to avoid problems with the events being considered 'already fired'
                setTimeout(function () {
                  $this.trigger("change.validation");
                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst
              }
            });
          }

          return false;

        }
      },
            regex: {
                name: "regex",
                init: function ($this, name) {
                    return {regex: regexFromString($this.data("validation" + name + "Regex"))};
                },
                validate: function ($this, value, validator) {
                    return (!validator.regex.test(value) && ! validator.negative)
                        || (validator.regex.test(value) && validator.negative);
                }
            },
            required: {
                name: "required",
                init: function ($this, name) {
                    return {};
                },
                validate: function ($this, value, validator) {
                    return !!(value.length === 0  && ! validator.negative)
                        || !!(value.length > 0 && validator.negative);
                },
        blockSubmit: true
            },
            match: {
                name: "match",
                init: function ($this, name) {
                    var element = $this.parents("form").first().find("[name=\"" + $this.data("validation" + name + "Match") + "\"]").first();
                    element.bind("validation.validation", function () {
                        $this.trigger("change.validation", {submitting: true});
                    });
                    return {"element": element};
                },
                validate: function ($this, value, validator) {
                    return (value !== validator.element.val() && ! validator.negative)
                        || (value === validator.element.val() && validator.negative);
                },
        blockSubmit: true
            },
            max: {
                name: "max",
                init: function ($this, name) {
                    return {max: $this.data("validation" + name + "Max")};
                },
                validate: function ($this, value, validator) {
                    return (parseFloat(value, 10) > parseFloat(validator.max, 10) && ! validator.negative)
                        || (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);
                }
            },
            min: {
                name: "min",
                init: function ($this, name) {
                    return {min: $this.data("validation" + name + "Min")};
                },
                validate: function ($this, value, validator) {
                    return (parseFloat(value) < parseFloat(validator.min) && ! validator.negative)
                        || (parseFloat(value) >= parseFloat(validator.min) && validator.negative);
                }
            },
            maxlength: {
                name: "maxlength",
                init: function ($this, name) {
                    return {maxlength: $this.data("validation" + name + "Maxlength")};
                },
                validate: function ($this, value, validator) {
                    return ((value.length > validator.maxlength) && ! validator.negative)
                        || ((value.length <= validator.maxlength) && validator.negative);
                }
            },
            minlength: {
                name: "minlength",
                init: function ($this, name) {
                    return {minlength: $this.data("validation" + name + "Minlength")};
                },
                validate: function ($this, value, validator) {
                    return ((value.length < validator.minlength) && ! validator.negative)
                        || ((value.length >= validator.minlength) && validator.negative);
                }
            },
            maxchecked: {
                name: "maxchecked",
                init: function ($this, name) {
                    var elements = $this.parents("form").first().find("[name=\"" + $this.attr("name") + "\"]");
                    elements.bind("click.validation", function () {
                        $this.trigger("change.validation", {includeEmpty: true});
                    });
                    return {maxchecked: $this.data("validation" + name + "Maxchecked"), elements: elements};
                },
                validate: function ($this, value, validator) {
                    return (validator.elements.filter(":checked").length > validator.maxchecked && ! validator.negative)
                        || (validator.elements.filter(":checked").length <= validator.maxchecked && validator.negative);
                },
        blockSubmit: true
            },
            minchecked: {
                name: "minchecked",
                init: function ($this, name) {
                    var elements = $this.parents("form").first().find("[name=\"" + $this.attr("name") + "\"]");
                    elements.bind("click.validation", function () {
                        $this.trigger("change.validation", {includeEmpty: true});
                    });
                    return {minchecked: $this.data("validation" + name + "Minchecked"), elements: elements};
                },
                validate: function ($this, value, validator) {
                    return (validator.elements.filter(":checked").length < validator.minchecked && ! validator.negative)
                        || (validator.elements.filter(":checked").length >= validator.minchecked && validator.negative);
                },
        blockSubmit: true
            }
        },
        builtInValidators: {
            email: {
                name: "Email",
                type: "shortcut",
                shortcut: "validemail"
            },
            validemail: {
                name: "Validemail",
                type: "regex",
                regex: "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\.[A-Za-z]{2,4}",
                message: "Неверный email адрес<!-- data-validator-validemail-message to override -->"
            },
            passwordagain: {
                name: "Passwordagain",
                type: "match",
                match: "password",
                message: "Does not match the given password<!-- data-validator-paswordagain-message to override -->"
            },
            positive: {
                name: "Positive",
                type: "shortcut",
                shortcut: "number,positivenumber"
            },
            negative: {
                name: "Negative",
                type: "shortcut",
                shortcut: "number,negativenumber"
            },
            number: {
                name: "Number",
                type: "regex",
                regex: "([+-]?\\\d+(\\\.\\\d*)?([eE][+-]?[0-9]+)?)?",
                message: "Must be a number<!-- data-validator-number-message to override -->"
            },
            integer: {
                name: "Integer",
                type: "regex",
                regex: "[+-]?\\\d+",
                message: "No decimal places allowed<!-- data-validator-integer-message to override -->"
            },
            positivenumber: {
                name: "Positivenumber",
                type: "min",
                min: 0,
                message: "Must be a positive number<!-- data-validator-positivenumber-message to override -->"
            },
            negativenumber: {
                name: "Negativenumber",
                type: "max",
                max: 0,
                message: "Must be a negative number<!-- data-validator-negativenumber-message to override -->"
            },
            required: {
                name: "Required",
                type: "required",
                message: "This is required<!-- data-validator-required-message to override -->"
            },
            checkone: {
                name: "Checkone",
                type: "minchecked",
                minchecked: 1,
                message: "Check at least one option<!-- data-validation-checkone-message to override -->"
            }
        }
    };

    var formatValidatorName = function (name) {
        return name
            .toLowerCase()
            .replace(
                /(^|\s)([a-z])/g ,
                function(m,p1,p2) {
                    return p1+p2.toUpperCase();
                }
            )
        ;
    };

    var getValue = function ($this) {
        // Extract the value we're talking about
        var value = $this.val();
        var type = $this.attr("type");
        if (type === "checkbox") {
            value = ($this.is(":checked") ? value : "");
        }
        if (type === "radio") {
            value = ($('input[name="' + $this.attr("name") + '"]:checked').length > 0 ? value : "");
        }
        return value;
    };

  function regexFromString(inputstring) {
        return new RegExp("^" + inputstring + "$");
    }

  /**
   * Thanks to Jason Bunting via StackOverflow.com
   *
   * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910
   * Short link: http://tinyurl.com/executeFunctionByName
  **/
  function executeFunctionByName(functionName, context /*, args*/) {
    var args = Array.prototype.slice.call(arguments).splice(2);
    var namespaces = functionName.split(".");
    var func = namespaces.pop();
    for(var i = 0; i < namespaces.length; i++) {
      context = context[namespaces[i]];
    }
    return context[func].apply(this, args);
  }

    $.fn.jqBootstrapValidation = function( method ) {

        if ( defaults.methods[method] ) {
            return defaults.methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
            return defaults.methods.init.apply( this, arguments );
        } else {
        $.error( 'Method ' +  method + ' does not exist on jQuery.jqBootstrapValidation' );
            return null;
        }

    };

  $.jqBootstrapValidation = function (options) {
    $(":input").not("[type=image],[type=submit]").jqBootstrapValidation.apply(this,arguments);
  };

})( jQuery );


 </script>
 <script>
 /*
  Jquery Validation using jqBootstrapValidation
   example is taken from jqBootstrapValidation docs 
  */
$(".lol").click(function() {

 $("input,textarea").jqBootstrapValidation(
    {
     preventSubmit: true,
     submitError: function($form, event, errors) {
      // something to have when submit produces an error ?
      // Not decided if I need it yet
     },
     submitSuccess: function($form, event) {
      event.preventDefault(); // prevent default submit behaviour
       // get values from FORM
       var name = $("input#name").val();  
       var email = $("input#email").val(); 
       var message = $("textarea#message").val();
        var firstName = name; // For Success/Failure Message
           // Check for white space in name for Success/Fail message
        if (firstName.indexOf(' ') >= 0) {
       firstName = name.split(' ').slice(0, -1).join(' ');
         }        
     $.ajax({
                url: "https://ainalab.kz/contact/contact_me.php",
                type: "POST",
                data: {name: name, email: email, message: message},
                cache: false,
                success: function() {  
                // Success message
                   $('#success').html("<div class='alert alert-success'>");
                   $('#success > .alert-success').html("<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;")
                    .append( "</button>");
                  $('#success > .alert-success')
                    .append("<strong>Ваше сообщение отправлено.</strong>");
          $('#success > .alert-success')
            .append('</div>');
                            
          //clear all fields
          $('#contactForm').trigger("reset");
          },
       error: function() {      
        // Fail message
         $('#success').html("<div class='alert alert-danger'>");
                $('#success > .alert-danger').html("<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;")
                 .append( "</button>");
                $('#success > .alert-danger').append("<strong>К сожалению, "+ firstName +" мой почтовый сервер не отвечает ...</strong> Не могли бы вы мне написать по электронной почте <a href='mailto:me@example.com?Subject=Message_Me from myprogrammingblog.com'>litter.corp@gmail.com</a> ? Извините за причиненные неудобства!");
            $('#success > .alert-danger').append('</div>');
        //clear all fields
        $('#contactForm').trigger("reset");
        },
           })
         },
         filter: function() {
                   return $(this).is(":visible");
         },
       });

      $("a[data-toggle=\"tab\"]").click(function(e) {
                    e.preventDefault();
                    $(this).tab("show");
        });
  });
 

/*When clicking on Full hide fail/success boxes */ 
$('#name').focus(function() {
     $('#success').html('');
  });

 </script>


<script>

$(".lol").click(function() {
  document.getElementById("my Dropdown").classList.toggle("show");
});

</script>
